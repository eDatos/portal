Application Stat4YouNormalizedValues {
    basePackage=com.stat4you.normalizedvalues

    Module normalizedvalues {
		basePackage=com.stat4you.normalizedvalues

        // ----------------------------------------------------------------
    	// 							ENTITIES
    	// ----------------------------------------------------------------
	
		"Languages"
        Entity LanguageEntity {        	
        	databaseTable = "TBL_LANGUAGES"
        	gap
        	not auditable
			!optimisticLocking
        	
        	"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;
        	"Code"
            String code length="20" not nullable;
            "Value"
            - @InternationalStringEntity value nullable cascade="all" databaseColumn="VALUE_FK";
			
			"Provides access to LanguageEntity"
            Repository LanguageRepository {
            	 protected List<@LanguageEntity> findByQuery;
            	 @LanguageEntity findLanguageByCode(String code);            	
            	 List<@LanguageEntity> findAll;
            }
        }
        
		"Categories"
        abstract Entity CategoryEntity {
        	databaseTable = "TBL_CATEGORIES"
        	gap
        	not auditable
			!optimisticLocking
			
			"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;
			"Code"
            String code length="20" not nullable;
            "Value"
            - @InternationalStringEntity value nullable cascade="all" databaseColumn="VALUE_FK";
            "Subcategories"
            - Bag<@CategoryEntity> subcategories cascade="all-delete-orphan" inverse orderby="id asc" <-> parent;
            "Parent category"
            - @CategoryEntity parent cascade="none" databaseColumn="PARENT_FK" nullable <-> subcategories;
            
            "Provides access to CategoryEntity"
            Repository CategoryRepository {
            	 protected List<@CategoryEntity> findByQuery;
            	 @CategoryEntity findCategoryByCode(String code);
            	 List<@CategoryEntity> findCategories;
            }
        }        
        
        "The International String is a collection of Localised Strings and supports the representation of text in multiple locales"
		Entity InternationalStringEntity {
			databaseTable = "TBL_INTERNATIONAL_STRINGS"
	       	not auditable
			!optimisticLocking

			"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;
			"Texts"
			- Bag <@LocalisedStringEntity> texts cascade="all-delete-orphan" inverse databaseColumn="INTERNATIONAL_STRING_FK";
				
			Repository InternationalStringNvRepository {
				findById;
	    		delete;
			}
		}     
      
        "The Localised String supports the representation of text in one locale (locale is similar to language but includes geographic 
		variations such as Canadian French, US English etc.)."
		Entity LocalisedStringEntity {
			databaseTable="TBL_LOCALISED_STRINGS"
			gap
			!aggregateRoot
			not auditable
			!optimisticLocking
			
			"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;
			"Label of the string"
	       	String label length="4000" not nullable;
	       	"The geographic locale of the string (Example: english, spanish)"
			String locale length="10" not nullable;
		}
		

        // ----------------------------------------------------------------
    	// 							SERVICES
    	// ----------------------------------------------------------------
    	"Provides access to normalized values"
		Service NormalizedValuesService {
			
			> @LanguageRepository
			> @CategoryRepository
			
       		"Retrieves all languages"
			List<@LanguageDto> retrieveLanguages() throws ApplicationException;
       		"Retrieves language"
			@LanguageDto retrieveLanguage(String code) throws ApplicationException;
       		"Retrieves all categories"
			List<@CategoryDto> retrieveCategories() throws ApplicationException;
       		"Retrieves category"
			@CategoryDto retrieveCategory(String code) throws ApplicationException;
		}
    	
    	
    	// ----------------------------------------------------------------
    	// 							DTO
    	// ----------------------------------------------------------------        	
    	"Dto for Language"
       	DataTransferObject LanguageDto {
			String code;	
            InternationalStringDto value;
        }
        
        "Dto for Category"
       	DataTransferObject CategoryDto {
			String code;	
            InternationalStringDto value;
            - List<@CategoryDto> subcategories;
        }
       	
       	// ----------------------------------------------------------------
    	// 							ENUMS
    	// ----------------------------------------------------------------   

    	"Codes to exceptions"
    	enum NormalizedValuesExceptionCodeEnum {
    		LANGUAGE_NOT_EXISTS,
    		CATEGORY_NOT_EXISTS,
    		REQUIRED_ATTRIBUTE,
    		ILLEGAL_ARGUMENT,
    		UNKNOWN,
    		OPERATION_NOT_SUPPORTED
    	}
    }
}

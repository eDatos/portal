Application Stat4YouStatistics {
    basePackage=com.stat4you.statistics
	
    Module dsd {
		basePackage=com.stat4you.statistics.dsd
		
        // ----------------------------------------------------------------
    	// 							SERVICES
    	// ----------------------------------------------------------------
    	"Provides access to Dataset structure definition"
		Service DsdService {
			
			> @ProviderRepository
			> @DatasetRepository
			> @DatasetVersionRepository
			> @DimensionRepository
			> @PrimaryMeasureRepository
			> @DataService
			
			// ------------------------------------------------------------
			//                       Providers
			// ------------------------------------------------------------
			"Creates provider. @return uri"
       		String createProvider(@ProviderDto providerDto) throws ApplicationException;
       		"Retrieves provider by uri"
			@ProviderDto retrieveProvider(String uri) throws ApplicationException;
       		"Retrieves provider by acronym"
			@ProviderDto retrieveProviderByAcronym(String acronym) throws ApplicationException;
			"Updates provider"
			updateProvider(@ProviderDto providerDto) throws ApplicationException;
			"Marks provider as removed"
       		removeProvider(String uri) throws ApplicationException;
       		"Retrieves all providers"
			List<@ProviderDto> retrieveProviders() throws ApplicationException;

			// ------------------------------------------------------------
			//                       Datasets
			// ------------------------------------------------------------
       		"Retrieves dataset. If version is not provided, retrieve last version"
			@DatasetBasicDto retrieveDataset(String uri) throws ApplicationException;
			"Retrieves current published dataset by uri"
			@DatasetBasicDto retrieveDatasetPublished(String uri) throws ApplicationException;
       		"Retrieves basic information of last version of dataset by identifier and provider acronym"
			@DatasetBasicDto retrieveDatasetBasicByIdentifier(String providerAcronym, String identifier) throws ApplicationException;
			"Retrieves last version of dataset by identifier and provider acronym"
			@DatasetDto retrieveDatasetByIdentifier(String providerAcronym, String identifier) throws ApplicationException;
			"Retrieves basic information of published dataset by identifier and provider acronym"
			@DatasetBasicDto retrieveDatasetBasicPublishedByIdentifier(String providerAcronym, String identifier) throws ApplicationException;
			"Retrieves published dataset by identifier and provider acronym"
			@DatasetDto retrieveDatasetPublishedByIdentifier(String providerAcronym, String identifier) throws ApplicationException;
       		"Retrieves last version of datasets. Provider is optional"
			Stat4YouCriteriaResult<@DatasetBasicDto> findDatasets(Stat4YouCriteria criteria) throws ApplicationException;
       		"Retrieves all published datasets. Provider is optional"
			Stat4YouCriteriaResult<@DatasetBasicDto> findDatasetsPublished(Stat4YouCriteria criteria) throws ApplicationException;
			"Retrieves last published datasets"
			List<@DatasetBasicDto> findDatasetsLastPublished(Integer count) throws ApplicationException;

			"Creates dataset. Check provider exists and can be modified. @return uri"
       		String createDataset(@DatasetDto datasetDto) throws ApplicationException;
			"Generates an unique identifier to dataset, from a proposed identifier. The identifier will be unique by provider"
			String generateDatasetIdentifier(String providerUri, String identifierOriginal) throws ApplicationException;
			"Updates draft version of dataset"
			updateDatasetDraft(@DatasetBasicDto datasetBasicDto) throws ApplicationException;
			"Creates new version of dataset with new information. Dataset must be published and not exists draft version. Ignore version. @return uri of new version"
       		String updateDatasetPublished(String datasetUri, @DatasetDto datasetDto) throws ApplicationException;
			"Publishes draft version of dataset. Ignore version"
       		publishDataset(String uri) throws ApplicationException;
			"Unpublishes dataset (published version and possible draft version). Ignore version"
       		unpublishDataset(String uri) throws ApplicationException;
       		"Discard dataset in draft. Delete dataset if global state is draft. Ignore version"
       		discardDatasetDraft(String uri) throws ApplicationException;

			// ------------------------------------------------------------
			//                       Dimensions
			// ------------------------------------------------------------
       		"Retrieves dimension by uri"
			@DimensionDto retrieveDimension(String uri) throws ApplicationException;
			"Retrieves basic dimensions of dataset"
            List<@DimensionBasicDto> retrieveDatasetDimensionsBasics(String datasetUri) throws ApplicationException;
			"Retrieves dimensions of dataset"
       		List<@DimensionDto> retrieveDatasetDimensions(String datasetUri) throws ApplicationException;       		
			"Updates dimension"
			updateDimension(@DimensionDto dimensionDto) throws ApplicationException;			
            "Retrieves dimenion codes"
            List<@CodeDimensionDto> retrieveCodesDimension(String dimensionUri) throws ApplicationException;

			// ------------------------------------------------------------
			//                       Primary Measure
			// ------------------------------------------------------------
       		"Retrieves primary measure by uri"
			@PrimaryMeasureDto retrievePrimaryMeasure(String uri) throws ApplicationException;
			"Retrieves primary measure of dataset"
       		@PrimaryMeasureDto retrieveDatasetPrimaryMeasure(String datasetUri) throws ApplicationException;       		
			"Updates primary measure"
			updatePrimaryMeasure(@PrimaryMeasureDto primaryMeasureDto) throws ApplicationException;

			// ------------------------------------------------------------
			//                       Definition of attributes
			// ------------------------------------------------------------
			"Retrieves definition of attributes of dataset"
       		List<@AttributeDefinitionDto> retrieveDatasetAttributeDefinitions(String datasetUri) throws ApplicationException;       		
		}
    	
    	// ----------------------------------------------------------------
    	// 							ENTITIES
    	// ----------------------------------------------------------------
	
		"Data productor. Examples: ISTAC, IBESTAT, INE..."
        Entity ProviderEntity {        	
        	databaseTable = "TBL_PROVIDERS"
        	gap
        	"Acronym. It is unique"
            String acronym length="50" not nullable;
            "Name"
            String name length="500" not nullable;
            "Url"
            String url length="4000" nullable;
            "License"
            - @InternationalStringEntity license nullable cascade="all" databaseColumn="LICENSE_FK";
            "License Url"
            String licenseUrl length="4000" nullable;
            "Language. Must be a code of languages of Normalized Values Service"
            String language length="20" nullable;
            "Logo filename"
            String logo length="200" nullable;
            "Description"
            - @InternationalStringEntity description nullable cascade="all" databaseColumn="DESCRIPTION_FK";
            "Citation"
            String citation length="4000" nullable;
            "Removed date"
            DateTimeTZ removedDate nullable;
			"Datasets of this provider"
			- Set<@DatasetEntity> datasets cascade="all-delete-orphan" fetch="lazy" inverse <-> provider;
			
			"Provides access to ProviderEntity"
            Repository ProviderRepository {
            	 @ProviderEntity save(@ProviderEntity entity);
            	 protected List<@ProviderEntity> findByQuery;
            	 protected List<@ProviderEntity> findByQuery(String query, Map<String, Object> parameters, int maxResult);
            	 @ProviderEntity findProviderByUuid(String uuid);
            	 @ProviderEntity findProviderByAcronym(String acronym);
            	 List<@ProviderEntity> findAllProviders;
            }
        }
        
        BasicType DatasetVersionInformation {
        	gap
        	"Id into database of DatasetVersion"
    		Long idDatasetVersion nullable;
    		"Version number of DatasetVersion"
    		Integer versionNumber nullable;
    	}
    	
        "Data supplied by a provided"
        Entity DatasetEntity {        	
        	databaseTable = "TBL_DATASETS"
        	gap
        	
			"Provider. One dataset belongs only to one provider"
			- @ProviderEntity provider not nullable cascade="none" databaseColumn="PROVIDER_FK" <-> datasets;
			"Semantic identifier"
			String identifier not nullable;
            "Release date in Stat4you. Corresponds to publishingDate of first version of dataset"
            DateTimeTZ releaseDate nullable;
            "Release date in Provider"
            DateTimeTZ providerReleaseDate nullable;
            "Themes/categories. Must be codes of categories of Normalized Values Service. Save as a ##category1##category2##category3##"
            String categories length="200" nullable;
            "Draft version"
            - @DatasetVersionInformation draftVersion nullable;
            "Published version"
            - @DatasetVersionInformation publishedVersion nullable;
			"All versions"
			- Bag<@DatasetVersionEntity> versions cascade="all-delete-orphan" fetch="lazy" inverse <-> dataset orderby="versionNumber asc";
					
			"Provides access to DatasetEntity"
            Repository DatasetRepository {
            	@DatasetEntity save(@DatasetEntity entity);
            	delete;
            	protected List<@DatasetEntity> findByQuery;
            	protected List<@DatasetEntity> findByQuery(String query, Map<String, Object> parameters, int maxResult);
            	@DatasetEntity findDatasetByUuid(String uuid);
            	@DatasetEntity findDatasetByIdentifierAndProviderUuid(String providerUuid, String identifier);
            	List<@DatasetEntity> findDatasets(String uuidProvider);
            }
        }
        
         "Dataset Versions"
        Entity DatasetVersionEntity {        	
        	databaseTable = "TBL_DATASETS_VERSIONS"
        	"Version"
        	Integer versionNumber not nullable;
            "Source"
            - @DatasetSourceEnum source not nullable;
            "Title"
            - @InternationalStringEntity title not nullable cascade="all" databaseColumn="TITLE_FK";
            "Description"
            - @InternationalStringEntity description nullable cascade="all" databaseColumn="DESCRIPTION_FK";
            "Url of dataset into Provider web page"
            String url length="4000" nullable;
            "Frequency"
            String frequency nullable length="4000";
            "Default language. Must be a code of languages of Normalized Values Service"
            String language length="20" nullable;
            "Languages. Must be codes of languages of Normalized Values Service. Save as a ##language1##language2##language3##"
            String languages length="200" nullable;
            "State"
            - @DatasetStateEnum state not nullable;
            "Publishing date in Provider"
            DateTimeTZ providerPublishingDate nullable;
            "Publishing date in Stat4You"
            DateTimeTZ publishingDate nullable;
            "Unpublishing date in Stat4You"
            DateTimeTZ unpublishingDate nullable;   
            "True if this version is the last"
       		Boolean isLastVersion not nullable;
                     
			"Dataset"
			- @DatasetEntity dataset not nullable cascade="none" databaseColumn="DATASET_FK" <-> versions;            
			"Dimensions of this dataset"
			- Bag<@DimensionEntity> dimensions cascade="all-delete-orphan" fetch="lazy" inverse orderby="id asc" <-> datasetVersion;
			"Primary measure"
			-@PrimaryMeasureEntity primaryMeasure databaseColumn="PRIMARY_MEASURE_FK" <-> datasetVersion fetch="lazy";
			"Definitions of attributes of this dataset"
			- Bag<@AttributeDefinitionEntity> attributeDefinitions cascade="all-delete-orphan" fetch="lazy" inverse orderby="id asc" <-> datasetVersion;
			
			"Provides access to DatasetVersionEntity"
            Repository DatasetVersionRepository {
            	@DatasetVersionEntity save(@DatasetVersionEntity entity);
            	delete;
            	findByCondition(PagingParameter pagingParameter);
            	protected List<@DatasetVersionEntity> findByQuery;
            	protected List<@DatasetVersionEntity> findByQuery(String query, Map<String, Object> parameters, int maxResult);
            	@DatasetVersionEntity retrieveDatasetByIdentifier(String providerAcronym, String identifier, Boolean published);
            	@DatasetVersionEntity retrieveDatasetVersion(String uuid, Integer version);
            	List<@DatasetVersionEntity> findDatasetsPublished(String uuidProvider);
            	List<@DatasetVersionEntity> findDatasetsLastVersions(String uuidProvider);
            	List<@DatasetVersionEntity> findDatasetsLastPublished(Integer count) throws ApplicationException;
            }
        }
        
        "Dimension of dataset"
        Entity DimensionEntity {
        	databaseTable = "TBL_DIMENSIONS"
        	gap
        	
			"Identifier"
        	String identifier not nullable;
            "Title"
            - @InternationalStringEntity title not nullable cascade="all" databaseColumn="TITLE_FK";
            "Codes"
			- Bag<@CodeDimensionEntity> codes cascade="all-delete-orphan" inverse databaseColumn="DIMENSION_FK" orderby="id asc";
			"Type"
			- @DimensionTypeEnum type not nullable;
			"Dataset version"
			- @DatasetVersionEntity datasetVersion cascade="none" fetch="lazy" databaseColumn="DATASET_VERSION_FK" <-> dimensions;
            "Attribute definitions"
            - Set <@AttributeDefinitionEntity> attributeDefinitions cascade="all-delete-orphan" inverse databaseColumn="ATTRIBUTE_DEFINITION_FK" <-> attachmentDimensions databaseJoinTable="TBL_ATTRIBUTES_DIMENSIONS";
			"Provides access to DimensionEntity"
            Repository DimensionRepository {
            	@DimensionEntity save(@DimensionEntity entity);
            	delete;
            	protected List<@DimensionEntity> findByQuery;
            	@DimensionEntity findDimensionByUuid(String uuid);
            }
        }  
        
        "Code of dimension"
        Entity CodeDimensionEntity {
        	databaseTable = "TBL_CODES_DIMENSIONS"
        	
        	"Identifier"
        	String identifier not nullable;
            "Title"
            - @InternationalStringEntity title not nullable cascade="all" databaseColumn="TITLE_FK";
            
            - Bag<@CodeDimensionEntity> subcodes cascade="all-delete-orphan" inverse databaseColumn="PARENT_FK" orderby="id asc";
        }  

        "Primary measure of dataset"
        Entity PrimaryMeasureEntity {
        	databaseTable = "TBL_PRIMARY_MEASURES"
        	
			"Identifier"
        	String identifier not nullable;
            "Title"
            - @InternationalStringEntity title not nullable cascade="all" databaseColumn="TITLE_FK";
            "Dataset version"
			- @DatasetVersionEntity datasetVersion cascade="none" fetch="lazy" <-> primaryMeasure;
            
			"Provides access to DimensionEntity"
            Repository PrimaryMeasureRepository {
            	@PrimaryMeasureEntity save(@PrimaryMeasureEntity entity);
            	delete;
            	protected List<@PrimaryMeasureEntity> findByQuery;
            	@PrimaryMeasureEntity findPrimaryMeasureByUuid(String uuid);
            }
        }  
        
		"Attribute definition of dataset"
        Entity AttributeDefinitionEntity {
        	databaseTable = "TBL_ATTRIBUTES_DEFINITIONS"
        	gap
        	
        	"Identifier"
        	String identifier not nullable;
            "Title"
            - @InternationalStringEntity title nullable cascade="all" databaseColumn="TITLE_FK";
			"Attatchment level"
			- @AttributeAttachmentLevelEnum attachmentLevel not nullable;
			"Attatchment dimensions"
            - Set <@DimensionEntity> attachmentDimensions cascade="none" databaseColumn="DIMENSION_FK" <-> attributeDefinitions;
			"Dataset version"
			- @DatasetVersionEntity datasetVersion cascade="none" fetch="lazy" databaseColumn="DATASET_VERSION_FK" <-> attributeDefinitions;
			"Provides access to AttributeDefinitionEntity"
            Repository AttributeDefinitionRepository {
            	@AttributeDefinitionEntity save(@AttributeDefinitionEntity entity);
            	delete;
            	protected List<@AttributeDefinitionEntity> findByQuery;
            	@AttributeDefinitionEntity findAttributeDefinitionByUuid(String uuid);
            }
        }         
         
        "The International String is a collection of Localised Strings and supports the representation of text in multiple locales"
		Entity InternationalStringEntity {
			databaseTable = "TBL_INTERNATIONAL_STRINGS"
	       	not auditable
			!optimisticLocking
			
			"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;
			"Texts"
			- Set <@LocalisedStringEntity> texts cascade="all-delete-orphan" inverse databaseColumn="INTERNATIONAL_STRING_FK";
				
			Repository InternationalStringRepository {
				findById;
	    		delete;
			}
		}     
      
        "The Localised String supports the representation of text in one locale (locale is similar to language but includes geographic 
		variations such as Canadian French, US English etc.)."
		Entity LocalisedStringEntity {
			databaseTable="TBL_LOCALISED_STRINGS"
			gap
			!aggregateRoot
			not auditable
			!optimisticLocking
			
			"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;
			"Label of the string"
	       	String label length="4000" not nullable;
	       	"The geographic locale of the string (Example: english, spanish)"
			String locale length="10" not nullable;
		}
		    	
    	// ----------------------------------------------------------------
    	// 							DTO
    	// ----------------------------------------------------------------        	
    	"Dto for Provider"
       	DataTransferObject ProviderDto extends @AuditableDto {
			String uri;	
			String name;
       		String acronym;
       		String url;
            InternationalStringDto license;
            String licenseUrl;
            String language;
            String logo;
            InternationalStringDto description;
            String citation;
            DateTimeTZ removedDate;
        }
       	
       	"Dto for Dataset"
       	DataTransferObject DatasetDto extends @DatasetBasicDto {
			- List<@DimensionDto> dimensions;
			- @PrimaryMeasureDto primaryMeasure;
			- List<@AttributeDefinitionDto> attributeDefinitions;       		
       	}
       	
       	"Dto for basic information for Dataset"
       	DataTransferObject DatasetBasicDto extends @AuditableDto {
			String uri;	
			String identifier;
       		String providerUri;
       		String publisher;
   		    - @DatasetSourceEnum source;
    		InternationalStringDto title;
    		InternationalStringDto description;
       		String url;
       		String frequency;
       		String language;
            List<String> languages;
            List<String> categories;
            - DatasetStateEnum state;
            DateTimeTZ releaseDate;
            DateTimeTZ providerReleaseDate;
            DateTimeTZ publishingDate;
            DateTimeTZ unpublishingDate;            
            DateTimeTZ providerPublishingDate;
			String draftUri;
			String publishedUri;
       	}

        "Dto for basic informtion for Dimension"
        DataTransferObject DimensionBasicDto extends @AuditableDto {
            String uri; 
            String identifier;
            - @DimensionTypeEnum type;
            InternationalStringDto title;
        }  
               	
       	"Dto for Dimension"
       	DataTransferObject DimensionDto extends @DimensionBasicDto {
			- List<@CodeDimensionDto> codes;
       	}       
       	
       	"Dto for CodeDimension"
       	DataTransferObject CodeDimensionDto {
			String identifier;
			InternationalStringDto title;
			- List<@CodeDimensionDto> subcodes;
       	}        		
       	
       	"Dto for Primary Measure"
       	DataTransferObject PrimaryMeasureDto extends @AuditableDto {
			String uri;	
			String identifier;
			InternationalStringDto title;
       	}     
       	
       	"Dto for AttributeDefinition"
       	DataTransferObject AttributeDefinitionDto extends @AuditableDto {
			String uri;
			String identifier;	
			InternationalStringDto title;
			- @AttributeAttachmentLevelEnum attachmentLevel;
			- List<@ResourceIdentierDto> attachmentDimensions;
       	}           
    	
    	"ResourceIdentifierDto"
    	DataTransferObject ResourceIdentierDto {
       		String uri;
       		String identifier;
    	}
    	
    	"AuditableDto"
    	DataTransferObject AuditableDto {
       		DateTime createdDate;
       		String createdBy;
       		DateTime lastUpdated;
       		String lastUpdatedBy;
    	}
    	
       	
       	// ----------------------------------------------------------------
    	// 							ENUMS
    	// ----------------------------------------------------------------   
    	"Dataset states"
    	enum DatasetStateEnum {
    		DRAFT,
    		PUBLISHED,
    		UNPUBLISHED
    	}
    	
    	"Source of dataset"
    	enum DatasetSourceEnum {
    		PX,
    		CSV,
    		MANUAL
    	}
    	
    	"Type of dimensions"
    	enum DimensionTypeEnum {
    		DIMENSION,
    		MEASURE_DIMENSION,
    		TIME_DIMENSION,
    		GEOGRAPHIC_DIMENSION
    	}
    	
    	"Attatchment level of an attribute"
    	enum AttributeAttachmentLevelEnum {
    		DATASET,
    		DIMENSION,
    		OBSERVATION
    	}    	

    	"Codes to exceptions"
    	enum DsdExceptionCodeEnum {
    		REQUIRED_ATTRIBUTE,
    		ILLEGAL_ARGUMENT,
    		UNKNOWN,
    		OPERATION_NOT_SUPPORTED,
    		PROVIDER_NOT_EXISTS,
    		PROVIDER_ALREADY_EXISTS,
    		PROVIDER_INCORRECT_STATUS,
    		PROVIDER_NOT_EXISTS_WITH_ACRONYM,
    		DATASET_NOT_EXISTS,
    		DATASET_NOT_EXISTS_WITH_IDENTIFIER,
    		DATASET_ALREADY_EXISTS,
    		DATASET_INCORRECT_STATUS,
    		DIMENSION_NOT_EXISTS,
    		PRIMARY_MEASURE_NOT_EXISTS
    	}
    }
    
	Module data {
		basePackage=com.stat4you.statistics.data
		
		"Dataset data: observations, attributes..."
		Service DataService {
			
			"Creates structure for observations of dataset"
			String createDatasetRepository(DatasetRepositoryDto datasetRepositoryDto) throws ApplicationException;
			"Delete structure for observations of dataset"
			deleteDatasetRepository(String datasetUri) throws ApplicationException;
       		"Create observations and observations attributes into dataset repository. Must specify identifiers of dimensions and dimensions codes (non uri)"
			createObservationsExtended(String datasetUri, List<ObservationExtendedDto> observationsExtended) throws ApplicationException;
			"Create attributes"
       		createAttributes(String datasetUri, List<AttributeDto> attributes) throws ApplicationException;
			"Finds observations specifying for each dimension what codes of dimensions are requested. Must specify identifiers of dimensions and dimensions codes (non uri)"
       		Map<String, ObservationDto> findObservationsByDimensions(String datasetUri, List<ConditionDimensionDto> conditionsDimensions) throws ApplicationException;
			"Finds observations and observations attributes specifying for each dimension what codes of dimensions are requested. Must specify identifiers of dimensions and dimensions codes (non uri)"
			Map<String, ObservationExtendedDto> findObservationsExtendedByDimensions(String datasetUri, List<ConditionDimensionDto> conditionsDimensions) throws ApplicationException;
			"Finds attributes. Only retrieve attributes of dataset and dimensions"
			List<AttributeDto> findAttributes(String datasetUri) throws ApplicationException;
		}    	
	}
	
	Module analytics {
		basePackage=com.stat4you.statistics.analytics
		
		// ----------------------------------------------------------------
    	// 							SERVICES
    	// ----------------------------------------------------------------
		Service AnalyticsService {
			> @DatasetVisitedRepository
			> @DatasetMostVisitedRepository
			
			addDatasetVisited(@DatasetVisitedDto datasetVisitedDto) throws ApplicationException;
			List<@DatasetMostVisitedDto> retrieveDatasetsMostVisited() throws ApplicationException;
		}
		
    	// ----------------------------------------------------------------
    	// 							ENTITIES
    	// ----------------------------------------------------------------
		"Datasets visited"
        Entity DatasetVisitedEntity {        	
        	databaseTable = "TBL_DATASETS_VISITED"
        	not auditable
			!optimisticLocking
			
			"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;
			"Provider"
			String providerAcronym length="50" not nullable;
			"Dataset"
			String datasetIdentifier not nullable;
			"User"
			String user length="200" not nullable;
			"Ip of user"
			String ip length="50" not nullable;
			"Accesing date"
            DateTime date not nullable;
            
            "Provides access to DatasetVisitedEntity"
            Repository DatasetVisitedRepository {
            	 @DatasetVisitedEntity save(@DatasetVisitedEntity entity);
            	 findAll;
            }
		}
		
		"Datasets most visited"
        Entity DatasetMostVisitedEntity {        	
        	databaseTable = "TBL_DATASETS_MOST_VISITED"
        	not auditable
			!optimisticLocking
			
			"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;
			"Provider"
			String providerAcronym length="50" not nullable;
			"Dataset"
			String datasetIdentifier not nullable;
			
			"Provides access to DatasetMostVisitedEntity"
            Repository DatasetMostVisitedRepository {
            	 findAll;
            }
		}

		"Datasets most visited, temporal"
        Entity DatasetMostVisitedTemporalEntity {        	
        	databaseTable = "TBL_DATASETS_MOST_VISITED_TMP"
        	not auditable
			!optimisticLocking
			
			"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;
			"Provider"
			String providerAcronym length="50" not nullable;
			"Dataset"
			String datasetIdentifier not nullable;
		}
		
    	// ----------------------------------------------------------------
    	// 							DTOS
    	// ----------------------------------------------------------------
		"Dto for DatasetVisited"
       	DataTransferObject DatasetVisitedDto {
			String datasetIdentifier;	
       		String providerAcronym;
       		String ip;
       		String user;
        }
        
		"Dto for DatasetMostVisited"
       	DataTransferObject DatasetMostVisitedDto {
			String datasetIdentifier;	
       		String providerAcronym;
        }
	}
}

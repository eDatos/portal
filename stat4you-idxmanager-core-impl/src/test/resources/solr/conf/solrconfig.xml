<?xml version="1.0" encoding="UTF-8" ?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements. See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License. You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!--
    For more details about configurations options that may appear in
    this file, see http://wiki.apache.org/solr/SolrConfigXml.
-->
<config>
    <!-- In all configuration below, a prefix of "solr." for class names
        is an alias that causes solr to search appropriate packages,
        including org.apache.solr.(search|update|request|core|analysis)

        You may also specify a fully qualified Java classname if you
        have your own custom plugins.
    -->

    <!-- Set this to 'false' if you want solr to continue working after
        it has encountered an severe configuration error. In a
        production environment, you may want solr to keep working even
        if one handler is mis-configured.

        You may also set this to false using by setting the system
        property:

        You may also set this to false using by setting the system property:
        -Dsolr.abortOnConfigurationError=false
    -->
    <abortOnConfigurationError>${solr.abortOnConfigurationError:true}</abortOnConfigurationError>

    <!-- Controls what version of Lucene various components of Solr
        adhere to. Generally, you want to use the latest version to
        get all bug fixes and improvements. It is highly recommended
        that you fully re-index after changing this setting as it can
        affect both how text is indexed and queried.
    -->
    <luceneMatchVersion>LUCENE_36</luceneMatchVersion>

    <!-- lib directives can be used to instruct Solr to load an Jars
        identified and use them to resolve any "plugins" specified in
        your solrconfig.xml or schema.xml (ie: Analyzers, Request
        Handlers, etc...).

        All directories and paths are resolved relative to the
        instanceDir.

        If a "./lib" directory exists in your instanceDir, all files
        found in it are included as if you had used the following
        syntax...

        <lib dir="./lib" />
    -->

    <!-- A 'dir' option by itself adds any files found in the directory
        to the classpath, this is useful for including all jars in a
        directory.
    -->
    <!--
        <lib dir="../add-everything-found-in-this-dir-to-the-classpath" />
    -->

    <!-- Data Directory

        Used to specify an alternate directory to hold all index data
        other than the default ./data under the Solr home. If
        replication is in use, this should match the replication
        configuration.
    -->
    <!--<dataDir>${solr.data.dir:}</dataDir> -->


    <!-- The DirectoryFactory to use for indexes.

        solr.StandardDirectoryFactory, the default, is filesystem
        based and tries to pick the best implementation for the current
        JVM and platform. One can force a particular implementation
        via solr.MMapDirectoryFactory, solr.NIOFSDirectoryFactory, or
        solr.SimpleFSDirectoryFactory.

        solr.RAMDirectoryFactory is memory based, not
        persistent, and doesn't work with replication.
    -->
    <!--<directoryFactory name="DirectoryFactory"
        class="${solr.directoryFactory:solr.StandardDirectoryFactory}"/> -->

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Index Config - These settings control low-level behavior of indexing
        Most example settings here show the default value, but are commented
        out, to more easily see where customizations have been made.

        Note: As of Solr 3.6, the <indexDefaults> and <mainIndex> sections
        are deprecated and not shown in the example config. They will
        still work, but will go away for good in 4.0
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <indexConfig>
        <!-- maxFieldLength specifies max number of *tokens* indexed per field. Default: 10000 -->
        <!-- <maxFieldLength>10000</maxFieldLength> -->
        <!-- Maximum time to wait for a write lock (ms) for an IndexWriter. Default: 1000 -->
        <!-- <writeLockTimeout>1000</writeLockTimeout> -->

        <!-- Expert: Enabling compound file will use less files for the index,
            using fewer file descriptors on the expense of performance decrease.
            Default in Lucene is "true". Default in Solr is "false" (since 3.6) -->
        <!-- <useCompoundFile>false</useCompoundFile> -->

        <!-- ramBufferSizeMB sets the amount of RAM that may be used by Lucene
            indexing for buffering added documents and deletions before they are
            flushed to the Directory.
            maxBufferedDocs sets a limit on the number of documents buffered
            before flushing.
            If both ramBufferSizeMB and maxBufferedDocs is set, then
            Lucene will flush based on whichever limit is hit first. -->
        <!-- <ramBufferSizeMB>32</ramBufferSizeMB> -->
        <!-- <maxBufferedDocs>1000</maxBufferedDocs> -->

        <!-- Expert: Merge Policy
            The Merge Policy in Lucene controls how merging of segments is done.
            The default since Solr/Lucene 3.3 is TieredMergePolicy.
            The default since Lucene 2.3 was the LogByteSizeMergePolicy,
            Even older versions of Lucene used LogDocMergePolicy.
        -->
        <!--
            <mergePolicy class="org.apache.lucene.index.TieredMergePolicy">
            <int name="maxMergeAtOnce">10</int>
            <int name="segmentsPerTier">10</int>
            </mergePolicy>
        -->

        <!-- Merge Factor
            The merge factor controls how many segments will get merged at a time.
            For TieredMergePolicy, mergeFactor is a convenience parameter which
            will set both MaxMergeAtOnce and SegmentsPerTier at once.
            For LogByteSizeMergePolicy, mergeFactor decides how many new segments
            will be allowed before they are merged into one.
            Default is 10 for both merge policies.
        -->
        <!--
            <mergeFactor>10</mergeFactor>
        -->

        <!-- Expert: Merge Scheduler
            The Merge Scheduler in Lucene controls how merges are
            performed. The ConcurrentMergeScheduler (Lucene 2.3 default)
            can perform merges in the background using separate threads.
            The SerialMergeScheduler (Lucene 2.2 default) does not.
        -->
        <!--
            <mergeScheduler class="org.apache.lucene.index.ConcurrentMergeScheduler"/>
        -->

        <!-- LockFactory

            This option specifies which Lucene LockFactory implementation
            to use.

            single = SingleInstanceLockFactory - suggested for a
            read-only index or when there is no possibility of
            another process trying to modify the index.
            native = NativeFSLockFactory - uses OS native file locking.
            Do not use when multiple solr webapps in the same
            JVM are attempting to share a single index.
            simple = SimpleFSLockFactory - uses a plain file for locking

            Defaults: 'native' is default for Solr3.6 and later, otherwise
            'simple' is the default

            More details on the nuances of each LockFactory...
            http://wiki.apache.org/lucene-java/AvailableLockFactories
        -->
        <!-- <lockType>native</lockType> -->

        <!-- Unlock On Startup

            If true, unlock any held write or commit locks on startup.
            This defeats the locking mechanism that allows multiple
            processes to safely access a lucene index, and should be used
            with care. Default is "false".

            This is not needed if lock type is 'none' or 'single'
        -->
        <!--
            <unlockOnStartup>false</unlockOnStartup>
        -->

        <!-- Expert: Controls how often Lucene loads terms into memory
            Default is 128 and is likely good for most everyone.
        -->
        <!-- <termIndexInterval>128</termIndexInterval> -->

        <!-- If true, IndexReaders will be reopened (often more efficient)
            instead of closed and then opened. Default: true
        -->
        <!--
            <reopenReaders>true</reopenReaders>
        -->

        <!-- Commit Deletion Policy

            Custom deletion policies can be specified here. The class must
            implement org.apache.lucene.index.IndexDeletionPolicy.

            http://lucene.apache.org/java/3_5_0/api/core/org/apache/lucene/index/IndexDeletionPolicy.html

            The default Solr IndexDeletionPolicy implementation supports
            deleting index commit points on number of commits, age of
            commit point and optimized status.

            The latest commit point should always be preserved regardless
            of the criteria.
        -->
        <deletionPolicy class="solr.SolrDeletionPolicy">
            <!-- The number of commit points to be kept -->
            <str name="maxCommitsToKeep">1</str>
            <!-- The number of optimized commit points to be kept -->
            <str name="maxOptimizedCommitsToKeep">0</str>
            <!--
                Delete all commit points once they have reached the given age.
                Supports DateMathParser syntax e.g.
            -->
            <!--
                <str name="maxCommitAge">30MINUTES</str>
                <str name="maxCommitAge">1DAY</str>
            -->
        </deletionPolicy>

        <!-- Lucene Infostream

            To aid in advanced debugging, Lucene provides an "InfoStream"
            of detailed information when indexing.

            Setting The value to true will instruct the underlying Lucene
            IndexWriter to write its debugging info the specified file
        -->
        <infoStream file="INFOSTREAM.txt">false</infoStream>
    </indexConfig>


    <!-- JMX

        This example enables JMX if and only if an existing MBeanServer
        is found, use this if you want to configure JMX through JVM
        parameters. Remove this to disable exposing Solr configuration
        and statistics to JMX.

        For more details see http://wiki.apache.org/solr/SolrJmx
    -->
    <jmx />
    <!-- If you want to connect to a particular server, specify the
        agentId
    -->
    <!-- <jmx agentId="myAgent" /> -->
    <!-- If you want to start a new MBeanServer, specify the serviceUrl -->
    <!-- <jmx serviceUrl="service:jmx:rmi:///jndi/rmi://localhost:9999/solr"/>
    -->

    <!-- The default high-performance update handler -->
    <updateHandler class="solr.DirectUpdateHandler2">

        <!-- AutoCommit

            Perform a <commit/> automatically under certain conditions.
            Instead of enabling autoCommit, consider using "commitWithin"
            when adding documents.

            http://wiki.apache.org/solr/UpdateXmlMessages

            maxDocs - Maximum number of documents to add since the last
            commit before automatically triggering a new commit.

            maxTime - Maximum amount of time that is allowed to pass
            since a document was added before automaticly
            triggering a new commit.
        -->
        <!--
            <autoCommit>
            <maxDocs>10000</maxDocs>
            <maxTime>1000</maxTime>
            </autoCommit>
        -->

        <!-- Update Related Event Listeners

            Various IndexWriter related events can trigger Listeners to
            take actions.

            postCommit - fired after every commit or optimize command
            postOptimize - fired after every optimize command
        -->
        <!-- The RunExecutableListener executes an external command from a
            hook such as postCommit or postOptimize.

            exe - the name of the executable to run
            dir - dir to use as the current working directory. (default=".")
            wait - the calling thread waits until the executable returns.
            (default="true")
            args - the arguments to pass to the program. (default is none)
            env - environment variables to set. (default is none)
        -->
        <!-- This example shows how RunExecutableListener could be used
            with the script based replication...
            http://wiki.apache.org/solr/CollectionDistribution
        -->
        <!--
            <listener event="postCommit" class="solr.RunExecutableListener">
            <str name="exe">solr/bin/snapshooter</str>
            <str name="dir">.</str>
            <bool name="wait">true</bool>
            <arr name="args"> <str>arg1</str> <str>arg2</str> </arr>
            <arr name="env"> <str>MYVAR=val1</str> </arr>
            </listener>
        -->
    </updateHandler>

    <!-- IndexReaderFactory

        Use the following format to specify a custom IndexReaderFactory,
        which allows for alternate IndexReader implementations.

        ** Experimental Feature **

        Please note - Using a custom IndexReaderFactory may prevent
        certain other features from working. The API to
        IndexReaderFactory may change without warning or may even be
        removed from future releases if the problems cannot be
        resolved.


        ** Features that may not work with custom IndexReaderFactory **

        The ReplicationHandler assumes a disk-resident index. Using a
        custom IndexReader implementation may cause incompatibility
        with ReplicationHandler and may cause replication to not work
        correctly. See SOLR-1366 for details.

    -->
    <!--
        <indexReaderFactory name="IndexReaderFactory" class="package.class">
        <str name="someArg">Some Value</str>
        </indexReaderFactory >
    -->
    <!-- By explicitly declaring the Factory, the termIndexDivisor can
        be specified.
    -->
    <!--
        <indexReaderFactory name="IndexReaderFactory"
        class="solr.StandardIndexReaderFactory">
        <int name="setTermIndexDivisor">12</int>
        </indexReaderFactory >
    -->

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Query section - these settings control query time things like caches
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <query>
        <!-- Max Boolean Clauses

            Maximum number of clauses in each BooleanQuery, an exception
            is thrown if exceeded.

            ** WARNING **

            This option actually modifies a global Lucene property that
            will affect all SolrCores. If multiple solrconfig.xml files
            disagree on this property, the value at any given moment will
            be based on the last SolrCore to be initialized.

        -->
        <maxBooleanClauses>1024</maxBooleanClauses>


        <!-- Solr Internal Query Caches

            There are two implementations of cache available for Solr,
            LRUCache, based on a synchronized LinkedHashMap, and
            FastLRUCache, based on a ConcurrentHashMap.

            FastLRUCache has faster gets and slower puts in single
            threaded operation and thus is generally faster than LRUCache
            when the hit ratio of the cache is high (> 75%), and may be
            faster under other scenarios on multi-cpu systems.
        -->

        <!-- Filter Cache

            Cache used by SolrIndexSearcher for filters (DocSets),
            unordered sets of *all* documents that match a query. When a
            new searcher is opened, its caches may be prepopulated or
            "autowarmed" using data from caches in the old searcher.
            autowarmCount is the number of items to prepopulate. For
            LRUCache, the autowarmed items will be the most recently
            accessed items.

            Parameters:
            class - the SolrCache implementation LRUCache or
            (LRUCache or FastLRUCache)
            size - the maximum number of entries in the cache
            initialSize - the initial capacity (number of entries) of
            the cache. (see java.util.HashMap)
            autowarmCount - the number of entries to prepopulate from
            and old cache.
        -->
        <filterCache class="solr.FastLRUCache" size="512" initialSize="512" autowarmCount="0" />

        <!-- Query Result Cache

            Caches results of searches - ordered lists of document ids
            (DocList) based on a query, a sort, and the range of documents
            requested.
        -->
        <queryResultCache class="solr.LRUCache" size="512" initialSize="512" autowarmCount="0" />

        <!-- Document Cache

            Caches Lucene Document objects (the stored fields for each
            document). Since Lucene internal document ids are transient,
            this cache will not be autowarmed.
        -->
        <documentCache class="solr.LRUCache" size="512" initialSize="512" autowarmCount="0" />

        <!-- Field Value Cache

            Cache used to hold field values that are quickly accessible
            by document id. The fieldValueCache is created by default
            even if not configured here.
        -->
        <!--
            <fieldValueCache class="solr.FastLRUCache"
            size="512"
            autowarmCount="128"
            showItems="32" />
        -->

        <!-- Custom Cache

            Example of a generic cache. These caches may be accessed by
            name through SolrIndexSearcher.getCache(),cacheLookup(), and
            cacheInsert(). The purpose is to enable easy caching of
            user/application level data. The regenerator argument should
            be specified as an implementation of solr.CacheRegenerator
            if autowarming is desired.
        -->
        <!--
            <cache name="myUserCache"
            class="solr.LRUCache"
            size="4096"
            initialSize="1024"
            autowarmCount="1024"
            regenerator="com.mycompany.MyRegenerator"
            />
        -->


        <!-- Lazy Field Loading

            If true, stored fields that are not requested will be loaded
            lazily. This can result in a significant speed improvement
            if the usual case is to not load all stored fields,
            especially if the skipped fields are large compressed text
            fields.
        -->
        <enableLazyFieldLoading>true</enableLazyFieldLoading>

        <!-- Use Filter For Sorted Query

            A possible optimization that attempts to use a filter to
            satisfy a search. If the requested sort does not include
            score, then the filterCache will be checked for a filter
            matching the query. If found, the filter will be used as the
            source of document ids, and then the sort will be applied to
            that.

            For most situations, this will not be useful unless you
            frequently get the same search repeatedly with different sort
            options, and none of them ever use "score"
        -->
        <!--
            <useFilterForSortedQuery>true</useFilterForSortedQuery>
        -->

        <!-- Result Window Size

            An optimization for use with the queryResultCache. When a search
            is requested, a superset of the requested number of document ids
            are collected. For example, if a search for a particular query
            requests matching documents 10 through 19, and queryWindowSize
            is 50, then documents 0 through 49 will be collected and cached.
            Any further requests in that range can be satisfied via the cache.
        -->
        <queryResultWindowSize>20</queryResultWindowSize>

        <!-- Maximum number of documents to cache for any entry in the
            queryResultCache.
        -->
        <queryResultMaxDocsCached>200</queryResultMaxDocsCached>

        <!-- Query Related Event Listeners

            Various IndexSearcher related events can trigger Listeners to
            take actions.

            newSearcher - fired whenever a new searcher is being prepared
            and there is a current searcher handling requests (aka
            registered). It can be used to prime certain caches to
            prevent long request times for certain requests.

            firstSearcher - fired whenever a new searcher is being
            prepared but there is no current registered searcher to handle
            requests or to gain autowarming data from.


        -->
        <!-- QuerySenderListener takes an array of NamedList and executes a
            local query request for each NamedList in sequence.
        -->
        <listener event="newSearcher" class="solr.QuerySenderListener">
            <arr name="queries">
                <!--
                    <lst><str name="q">solr</str><str name="sort">price asc</str></lst>
                    <lst><str name="q">rocks</str><str name="sort">weight asc</str></lst>
                -->
            </arr>
        </listener>
        <listener event="firstSearcher" class="solr.QuerySenderListener">
            <arr name="queries">
                <lst>
                    <str name="q">static firstSearcher warming in solrconfig.xml</str>
                </lst>
            </arr>
        </listener>

        <!-- Use Cold Searcher

            If a search request comes in and there is no current
            registered searcher, then immediately register the still
            warming searcher and use it. If "false" then all requests
            will block until the first searcher is done warming.
        -->
        <useColdSearcher>false</useColdSearcher>

        <!-- Max Warming Searchers

            Maximum number of searchers that may be warming in the
            background concurrently. An error is returned if this limit
            is exceeded.

            Recommend values of 1-2 for read-only slaves, higher for
            masters w/o cache warming.
        -->
        <maxWarmingSearchers>2</maxWarmingSearchers>

    </query>


    <!-- Request Dispatcher

        This section contains instructions for how the SolrDispatchFilter
        should behave when processing requests for this SolrCore.

        If you wish to regain use of /select?qt=... style request handler
        dispatching, then first add handleSelect="true" to
        <requestDispatcher>. Then change the name of the request handler
        named "/select" to something else without a leading "/", such as
        simply "select" and add default="true" to it.
    -->
    <requestDispatcher handleSelect="true">
        <!-- Request Parsing

            These settings indicate how Solr Requests may be parsed, and
            what restrictions may be placed on the ContentStreams from
            those requests

            enableRemoteStreaming - enables use of the stream.file
            and stream.url parameters for specifying remote streams.
            SearchRequestHandler won't fetch it, but some others do.

            multipartUploadLimitInKB - specifies the max size of
            Multipart File Uploads that Solr will allow in a Request.

            *** WARNING ***
            The settings below authorize Solr to fetch remote files, You
            should make sure your system has some authentication before
            using enableRemoteStreaming="true"

        -->
        <requestParsers enableRemoteStreaming="true" multipartUploadLimitInKB="2048000" />

        <!-- HTTP Caching

            Set HTTP caching related parameters (for proxy caches and clients).

            The options below instruct Solr not to output any HTTP Caching
            related headers
        -->
        <httpCaching lastModifieFrom="openTime" etagSeed="Solr" />
        <!-- If you include a <cacheControl> directive, it will be used to
            generate a Cache-Control header (as well as an Expires header
            if the value contains "max-age=")

            By default, no Cache-Control header is generated.

            You can use the <cacheControl> option even if you have set
            never304="true"
        -->
        <!--
            <httpCaching never304="true" >
            <cacheControl>max-age=30, public</cacheControl>
            </httpCaching>
        -->
        <!-- To enable Solr to respond with automatically generated HTTP
            Caching headers, and to response to Cache Validation requests
            correctly, set the value of never304="false"

            This will cause Solr to generate Last-Modified and ETag
            headers based on the properties of the Index.

            The following options can also be specified to affect the
            values of these headers...

            lastModFrom - the default value is "openTime" which means the
            Last-Modified value (and validation against If-Modified-Since
            requests) will all be relative to when the current Searcher
            was opened. You can change it to lastModFrom="dirLastMod" if
            you want the value to exactly correspond to when the physical
            index was last modified.

            etagSeed="..." is an option you can change to force the ETag
            header (and validation against If-None-Match requests) to be
            different even if the index has not changed (ie: when making
            significant changes to your config file)

            (lastModifiedFrom and etagSeed are both ignored if you use
            the never304="true" option)
        -->
        <!--
            <httpCaching lastModifiedFrom="openTime"
            etagSeed="Solr">
            <cacheControl>max-age=30, public</cacheControl>
            </httpCaching>
        -->
    </requestDispatcher>

    <!-- Request Handlers

        http://wiki.apache.org/solr/SolrRequestHandler

        Incoming queries will be dispatched to the correct handler
        based on the matching request path piece.

        If a Request Handler is declared with startup="lazy", then it will
        not be initialized until the first request that uses it.

    -->


    <!-- ******************************************************************** -->
    <!-- DISMAXREQUESTHANDLER, fue disenado para procesar frases smples -->
    <!-- introducidas por los usuarios, sin una sintaxis compleja, y que -->
    <!-- permite buscar palabras individuales a traves de distintos campos -->
    <!-- con pesos basados en la importancia de cada campo. Tambien permite -->
    <!-- de manera adicional influir en la score basandose en reglas -->
    <!-- especificas para cada caso indepentientemente de la entrada del -->
    <!-- usuario -->
    <!-- http://wiki.apache.org/solr/DisMaxRequestHandler -->
    <!-- ******************************************************************** -->
    <requestHandler name="dismax" class="solr.SearchHandler" default="true">
        <!-- default values for query parameters -->
        <lst name="defaults">
            <str name="defType">dismax</str>
            <!-- No incluir campos en la respuesta -->
            <str name="echoParams">none</str>
            <!-- Factor de desempate, como influyen los campos con puntuaciones menores en el score
                0.0 = pure "disjunction max query", el campo con mayor score es el que contribuye a
                la puntuacion final.
                1.0 = pure "disjunction sum query", el score es la suma del score de todos los campos -->
            <float name="tie">0.01</float>

            <!-- Query Fields:: List of fields and the "boosts" to associate with each of them when building DisjunctionMaxQueries from the user's query. -->

            <str name="qf">ds_name_es ds_name_en ds_name_ca ds_name_eu prov_name^0.5</str>

            <!-- Phrase Fields:: Can be used to "boost" the score of documents in cases where all of the terms in the "q" param appear in close proximity. -->

            <str name="pf">ds_name_es ds_name_en ds_name_ca ds_name_eu prov_name^0.5</str>

            <!-- Boost Functions:: Functions (with optional boosts) that will be included in the user's query to influence the score. -->
            <!-- <str name="bf"> -->
            <!-- popularity^0.5 recip(price,1,1000,1000)^0.3 -->
            <!-- </str> -->

            <!-- Field List:: This parameter can be used to specify a set of fields to return, limiting
                the amount of information in the response. -->
            <str name="fl">*</str>

            <!-- Minimum number of 'ShouldMatch' clauses that (ahem) must match
                More info: http://www.lucidimagination.com/blog/2010/05/23/whats-a-dismax/
                http://lucene.apache.org/solr/api/org/apache/solr/util/doc-files/min-should-match.html
                Ej: 2<-1 5<-2 6<90% == Si hay 1 o 2 clausulas son requeridas, si hay de 3 a 5 clausulas todas
                menos una son requeridas, si hay mas de 6 clausuas el 90% de ellas son requeridas.
            -->
            <str name="mm">
                2&lt;-1 5&lt;-2 6&lt;90% </str>
            <!-- Phrase Slop:: Amount of slop on phrase queries built for "pf" fields (affects boosting). -->
            <int name="ps">100</int>
            <!-- The q.alt parameter is used as a fallback query for cases when the client did not provide any search terms -->
            <str name="q.alt">*:*</str>

            <!-- example highlighter config, enable per-query with hl=true -->
            <str name="hl">false</str>
            <!-- for this field, we want no fragmenting, just highlighting -->
            <!-- <str name="f.name.hl.fragsize">0</str> -->
            <!-- instructs Solr to return the field itself if no query terms are
                found -->
            <!-- <str name="f.name.hl.alternateField">nm_description</str> -->
            <str name="f.text_es.hl.fragmenter">regex</str> <!-- defined below -->
        </lst>
    </requestHandler>



    <!-- ******************************************************************** -->
    <!-- HANDLE para proveer acceso a los terms indexados en un campo y el -->
    <!-- numero de documentos que hacen match con cada term -->
    <!-- Muy util para usar "auto-suggest" o para operar a nivel de terms -->
    <!-- en vez de a nivel de documentos (SIN USAR) -->
    <!-- Terms Component: http://wiki.apache.org/solr/TermsComponent -->
    <!-- ******************************************************************** -->
    <!-- A component to return terms and document frequency of those terms.
        This component does not yet support distributed search. -->
    <searchComponent name="terms" class="solr.TermsComponent" />

    <requestHandler name="/terms" class="solr.SearchHandler">
        <lst name="defaults">
            <bool name="terms">true</bool>
        </lst>
        <arr name="components">
            <str>terms</str>
        </arr>
    </requestHandler>


    <!-- ******************************************************************** -->
    <!-- HANDLER para actualizar contenido mediante un archivo XML (sin usar) -->
    <!-- ******************************************************************** -->
    <!-- Update request handler.
        Note: Since solr1.1 requestHandlers requires a valid content type header if posted in
        the body. For example, curl now requires: -H 'Content-type:text/xml; charset=utf-8'
        The response format differs from solr1.1 formatting and returns a standard error code.
        To enable solr1.1 behavior, remove the /update handler or change its path
    -->
    <requestHandler name="/update" class="solr.XmlUpdateRequestHandler" />

    <!-- ******************************************************************** -->
    <!-- HANDLER para actualizar contenido desde SOLRJ -->
    <!-- ******************************************************************** -->
    <requestHandler name="/update/javabin" class="solr.BinaryUpdateRequestHandler" />

    <!--
        Analysis request handler. Since Solr 1.3. Use to return how a document is analyzed. Useful
        for debugging and as a token server for other types of applications.

        This is deprecated in favor of the improved DocumentAnalysisRequestHandler and FieldAnalysisRequestHandler

        <requestHandler name="/analysis" class="solr.AnalysisRequestHandler" />
    -->

    <!--
        An analysis handler that provides a breakdown of the analysis process of provided docuemnts. This handler expects a
        (single) content stream with the following format:

        <docs>
        <doc>
        <field name="id">1</field>
        <field name="name">The Name</field>
        <field name="text">The Text Value</field>
        <doc>
        <doc>...</doc>
        <doc>...</doc>
        ...
        </docs>

        Note: Each document must contain a field which serves as the unique key. This key is used in the returned
        response to assoicate an analysis breakdown to the analyzed document.

        Like the FieldAnalysisRequestHandler, this handler also supports query analysis by
        sending either an "analysis.query" or "q" request paraemter that holds the query text to be analyized. It also
        supports the "analysis.showmatch" parameter which when set to true, all field tokens that match the query
        tokens will be marked as a "match".
    -->
    <requestHandler name="/analysis/document" class="solr.DocumentAnalysisRequestHandler" />

    <!--
        RequestHandler that provides much the same functionality as analysis.jsp. Provides the ability
        to specify multiple field types and field names in the same request and outputs index-time and
        query-time analysis for each of them.

        Request parameters are:
        analysis.fieldname - The field name whose analyzers are to be used
        analysis.fieldtype - The field type whose analyzers are to be used
        analysis.fieldvalue - The text for index-time analysis
        q (or analysis.q) - The text for query time analysis
        analysis.showmatch (true|false) - When set to true and when query analysis is performed, the produced
        tokens of the field value analysis will be marked as "matched" for every
        token that is produces by the query analysis
    -->
    <requestHandler name="/analysis/field" class="solr.FieldAnalysisRequestHandler" />


    <!-- CSV update handler, loaded on demand -->
    <requestHandler name="/update/csv" class="solr.CSVRequestHandler" startup="lazy" />


    <!-- ******************************************************************** -->
    <!-- HANDLERS para Administracion -->
    <!-- ******************************************************************** -->
    <!--
        Admin Handlers - This will register all the standard admin RequestHandlers. Adding
        this single handler is equivalent to registering:

        <requestHandler name="/admin/luke" class="org.apache.solr.handler.admin.LukeRequestHandler" />
        <requestHandler name="/admin/system" class="org.apache.solr.handler.admin.SystemInfoHandler" />
        <requestHandler name="/admin/plugins" class="org.apache.solr.handler.admin.PluginInfoHandler" />
        <requestHandler name="/admin/threads" class="org.apache.solr.handler.admin.ThreadDumpHandler" />
        <requestHandler name="/admin/properties" class="org.apache.solr.handler.admin.PropertiesRequestHandler" />
        <requestHandler name="/admin/file" class="org.apache.solr.handler.admin.ShowFileRequestHandler" >

        If you wish to hide files under ${solr.home}/conf, explicitly register the ShowFileRequestHandler using:
        <requestHandler name="/admin/file" class="org.apache.solr.handler.admin.ShowFileRequestHandler" >
        <lst name="invariants">
        <str name="hidden">synonyms.txt</str>
        <str name="hidden">anotherfile.txt</str>
        </lst>
        </requestHandler>
    -->
    <requestHandler name="/admin/" class="solr.admin.AdminHandlers" />

    <!-- ping/healthcheck -->
    <requestHandler name="/admin/ping" class="PingRequestHandler">
        <lst name="defaults">
            <str name="qt">standard</str>
            <str name="q">solrpingquery</str>
            <str name="echoParams">all</str>
        </lst>
    </requestHandler>

    <!-- Echo the request contents back to the client -->
    <requestHandler name="/debug/dump" class="solr.DumpRequestHandler">
        <lst name="defaults">
            <str name="echoParams">explicit</str> <!-- for all params (including the default etc) use: 'all' -->
            <str name="echoHandler">true</str>
        </lst>
    </requestHandler>

    <!-- ******************************************************************** -->
    <!-- HIGHLIGHTING configuracion -->
    <!-- ******************************************************************** -->
    <searchComponent class="solr.HighlightComponent" name="highlight">
        <highlighting>
            <!-- Configure the standard fragmenter -->
            <!-- This could most likely be commented out in the "default" case -->
            <fragmenter name="gap" class="solr.highlight.GapFragmenter" default="true">
                <lst name="defaults">
                    <int name="hl.fragsize">100</int>
                </lst>
            </fragmenter>

            <!-- A regular-expression-based fragmenter (f.i., for sentence extraction) -->
            <fragmenter name="regex" class="solr.highlight.RegexFragmenter">
                <lst name="defaults">
                    <!-- slightly smaller fragsizes work better because of slop -->
                    <int name="hl.fragsize">70</int>
                    <!-- allow 50% slop on fragment sizes -->
                    <float name="hl.regex.slop">0.5</float>
                    <!-- a basic sentence pattern -->
                    <str name="hl.regex.pattern">[-\w ,/\n\"']{20,200}</str>
                </lst>
            </fragmenter>

            <!-- Configure the standard formatter -->
            <formatter name="html" class="org.apache.solr.highlight.HtmlFormatter" default="true">
                <lst name="defaults">
                    <str name="hl.simple.pre"><![CDATA[<em>]]></str>
                    <str name="hl.simple.post"><![CDATA[</em>]]></str>
                </lst>
            </formatter>

        </highlighting>
    </searchComponent>

    <!-- ******************************************************************** -->
    <!-- INTERFAZ DE ADMINISTRACION configuracion -->
    <!-- ******************************************************************** -->
    <admin>
        <defaultQuery>*:*</defaultQuery>

        <!-- configure a healthcheck file for servers behind a loadbalancer
            <healthcheck type="file">server-enabled</healthcheck>
        -->
    </admin>

</config>
